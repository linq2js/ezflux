{"version":3,"sources":["../index.js"],"names":["createImmutable","require","createPromise","factory","Promise","resolve","reject","error","payload","ModelHandler","model","type","onChange","readOnly","find","args","callback","concat","count","filter","countDocuments","deleteMany","action","deleteOne","save","context","data","module","exports"],"mappings":"AAAA,MAAM,EAAEA,eAAF,KAAsBC,QAAQ,cAAR,CAA5B;;AAEA,SAASC,aAAT,CAAuBC,OAAvB,EAAgC;AAC9B,SAAO,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACtCH,YAAQ,UAASI,KAAT,EAAgBC,OAAhB,EAAyB;AAC/B,UAAID,KAAJ,EAAW;AACTD,eAAOC,KAAP;AACD,OAFD,MAGK;AACHF,gBAAQG,OAAR;AACD;AACF,KAPD;AAQD,GATM,CAAP;AAUD;;AAED,SAASC,YAAT,CAAsBC,KAAtB,EAA6B;AAC3B,SAAO,UAAU,EAAEC,IAAF,EAAQC,QAAR,EAAkBC,QAAlB,EAAV,EAAwC;AAC7C,QAAIF,SAAS,KAAb,EAAoB;AAClB,aAAOX;AACL;AACA;AACE,cAAMc,IAAN,CAAW,GAAGC,IAAd,EAAoB;AAClB,iBAAOb,cAAcc,YAAYN,MAAMI,IAAN,CAAW,GAAGC,KAAKE,MAAL,CAAYD,QAAZ,CAAd,CAA1B,CAAP;AACD,SAHH;;AAKE,cAAME,KAAN,CAAYC,MAAZ,EAAoB;AAClB,iBAAOjB,cAAcc,YAAYN,MAAMU,cAAN,CAAqBD,MAArB,EAA6BH,QAA7B,CAA1B,CAAP;AACD;AAPH,OAFK,EAWLH,WAAW,EAAX;AACE;AACA;;AAEE,cAAMQ,UAAN,CAAiBF,MAAjB,EAAyB;AACvB,gBAAMjB,cAAcc,YAAYN,MAAMW,UAAN,CAAiBF,MAAjB,EAAyBH,QAAzB,CAA1B,CAAN;AACAJ,mBAAS,EAAEU,QAAQ,YAAV,EAAwBH,MAAxB,EAAT;AACD,SALH;AAME,cAAMI,SAAN,CAAgBJ,MAAhB,EAAwB;AACtB,gBAAMjB,cAAcc,YAAYN,MAAMa,SAAN,CAAgBJ,MAAhB,EAAwBH,QAAxB,CAA1B,CAAN;AACAJ,mBAAS,EAAEU,QAAQ,WAAV,EAAuBH,MAAvB,EAAT;AACD,SATH;AAUE;AACA,cAAMK,IAAN,CAAWC,OAAX,EAAoBC,IAApB,EAA0B;AACxB,gBAAM,IAAIhB,KAAJ,CAAUgB,IAAV,EAAgBF,IAAhB,EAAN;AACAZ,mBAAS,EAAEU,QAAQ,MAAV,EAAkBI,IAAlB,EAAT;AACD;AAdH,OAbG,CAAP;AA6BD;AACF,GAhCD;AAiCD;;AAEDC,OAAOC,OAAP,GAAiB;AACfnB;AADe,CAAjB","file":"index.js","sourcesContent":["const { createImmutable } = require('@ezflux/data');\r\n\r\nfunction createPromise(factory) {\r\n  return new Promise((resolve, reject) => {\r\n    factory(function(error, payload) {\r\n      if (error) {\r\n        reject(error);\r\n      }\r\n      else {\r\n        resolve(payload);\r\n      }\r\n    });\r\n  });\r\n}\r\n\r\nfunction ModelHandler(model) {\r\n  return function ({ type, onChange, readOnly }) {\r\n    if (type === 'get') {\r\n      return createImmutable(\r\n        // read only methods\r\n        {\r\n          async find(...args) {\r\n            return createPromise(callback => model.find(...args.concat(callback)));\r\n          },\r\n\r\n          async count(filter) {\r\n            return createPromise(callback => model.countDocuments(filter, callback));\r\n          },\r\n        },\r\n        readOnly ? {} :\r\n          // mutable methods\r\n          {\r\n\r\n            async deleteMany(filter) {\r\n              await createPromise(callback => model.deleteMany(filter, callback));\r\n              onChange({ action: 'deleteMany', filter });\r\n            },\r\n            async deleteOne(filter) {\r\n              await createPromise(callback => model.deleteOne(filter, callback));\r\n              onChange({ action: 'deleteOne', filter });\r\n            },\r\n            // define save method\r\n            async save(context, data) {\r\n              await new model(data).save();\r\n              onChange({ action: 'save', data });\r\n            }\r\n          });\r\n    }\r\n  }\r\n}\r\n\r\nmodule.exports = {\r\n  ModelHandler\r\n};"]}