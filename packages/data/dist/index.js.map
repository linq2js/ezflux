{"version":3,"sources":["../index.js"],"names":["createImmutable","model","queue","dispatchQueue","splice","item","innerDispatch","action","args","lazyDispatch","isDispatching","state","actionResult","hasChange","getState","dispatch","propName","prevValue","$$get","nextValue","proxyData","getProxyData","uncachedValue","type","cached","get","prev","undefined","next","propChanged","notify","length","setTimeout","subscribers","mapper","cache","fromCache","loader","proxy","Proxy","target","subscribe","subscriber","push","unsubcribed","unsubscribedIndexes","i","pop","dataOrCache","immutableMethods","mutableMethods","isObjectData","value","arguments","Object","assign","immutable","mutable","Error"],"mappings":"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","file":"index.js","sourcesContent":["const uncachedValue = {};\r\nconst getProxyData = \"@@ProxyData\";\r\n\r\nexport function createImmutable(dataOrCache, immutableMethods, mutableMethods) {\r\n  const isObjectData = dataOrCache !== undefined;\r\n  let proxy;\r\n  if (!isObjectData) {\r\n    dataOrCache = {};\r\n  }\r\n  return (proxy = new Proxy(dataOrCache, {\r\n    get(target, propName) {\r\n      if (isObjectData) {\r\n        if (propName === getProxyData) return dataOrCache;\r\n\r\n        return function(value) {\r\n          if (!arguments.length) return dataOrCache[propName];\r\n          if (dataOrCache[propName] !== value) {\r\n            return createImmutable(\r\n              Object.assign({}, dataOrCache, { [propName]: value })\r\n            );\r\n          }\r\n          return proxy;\r\n        };\r\n      } else {\r\n        if (propName === getProxyData) {\r\n          return {\r\n            immutable: immutableMethods,\r\n            mutable: mutableMethods,\r\n            cache: dataOrCache\r\n          };\r\n        }\r\n\r\n        return function(value) {\r\n          if (!arguments.length) {\r\n            if (propName in immutableMethods) {\r\n              if (propName in dataOrCache) return dataOrCache[propName];\r\n              return (dataOrCache[propName] = immutableMethods[propName](\r\n                dataOrCache\r\n              ));\r\n            }\r\n            throw new Error(\"No immutable method named \" + propName);\r\n          }\r\n\r\n          if (propName in mutableMethods) {\r\n            dataOrCache[propName] = mutableMethods[propName](\r\n              value,\r\n              dataOrCache\r\n            );\r\n            return createImmutable(\r\n              dataOrCache,\r\n              immutableMethods,\r\n              mutableMethods\r\n            );\r\n          }\r\n          throw new Error(\"No mutable method named \" + propName);\r\n        };\r\n      }\r\n    }\r\n  }));\r\n}\r\n\r\nexport default function(model) {\r\n  const subscribers = [];\r\n  const dispatchQueue = [];\r\n  let isDispatching;\r\n\r\n  function getState(mapper) {\r\n    const cache = {};\r\n\r\n    function $$get(propName, fromCache) {\r\n      if (propName in cache) return cache[propName];\r\n\r\n      if (fromCache) {\r\n        return uncachedValue;\r\n      }\r\n\r\n      const loader = model[propName];\r\n\r\n      if (typeof loader !== \"function\") {\r\n        return loader;\r\n      }\r\n\r\n      return (cache[propName] = loader({\r\n        type: \"get\"\r\n      }));\r\n    }\r\n\r\n    const proxy = new Proxy(model, {\r\n      get(target, propName) {\r\n        if (propName === \"$$get\") return $$get;\r\n        return $$get(propName, false);\r\n      }\r\n    });\r\n\r\n    if (mapper) return mapper(proxy);\r\n\r\n    return proxy;\r\n  }\r\n\r\n  function subscribe(subscriber) {\r\n    subscribers.push(subscriber);\r\n    return function() {\r\n      subscriber.unsubcribed = true;\r\n    };\r\n  }\r\n\r\n  async function lazyDispatch() {\r\n    const queue = dispatchQueue.splice();\r\n    for (let item of queue) {\r\n      await innerDispatch(item.action, item.args);\r\n    }\r\n  }\r\n\r\n  function notify(state) {\r\n    const unsubscribedIndexes = [];\r\n\r\n    for (let i = 0; i < subscribers.length; i++) {\r\n      const subscriber = subscribers[i];\r\n      if (subscriber.unsubcribed) {\r\n        unsubscribedIndexes.push(i);\r\n        continue;\r\n      }\r\n      subscriber(state);\r\n    }\r\n    while (unsubscribedIndexes.length) {\r\n      subscribers.splice(unsubscribedIndexes.pop(), 1);\r\n    }\r\n  }\r\n\r\n  async function innerDispatch(action, args) {\r\n    isDispatching = true;\r\n    try {\r\n      let state;\r\n      let actionResult = await action(...args);\r\n      let hasChange = false;\r\n\r\n      if (typeof actionResult === \"function\") {\r\n        actionResult = await actionResult((state = getState()), dispatch);\r\n      }\r\n\r\n      if (actionResult) {\r\n        if (!state) {\r\n          state = getState();\r\n        }\r\n\r\n        for (let propName in actionResult) {\r\n          const prevValue = state.$$get(propName, true);\r\n          let nextValue = actionResult[propName];\r\n\r\n          if (nextValue) {\r\n            const proxyData = nextValue[getProxyData];\r\n            if (proxyData) {\r\n              nextValue = proxyData;\r\n            }\r\n          }\r\n\r\n          if (\r\n            prevValue !== nextValue &&\r\n            typeof model[propName] === \"function\"\r\n          ) {\r\n            if (prevValue !== uncachedValue && prevValue === nextValue) {\r\n              // nothing change\r\n            } else {\r\n              let propChanged = await model[propName]({\r\n                type: \"set\",\r\n                cached: prevValue !== uncachedValue,\r\n                get: () => state.$$get(propName),\r\n                prev: prevValue === uncachedValue ? undefined : prevValue,\r\n                next: nextValue\r\n              });\r\n\r\n              if (propChanged !== false) {\r\n                hasChange = true;\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n\r\n      if (hasChange) {\r\n        notify(state);\r\n      }\r\n    } finally {\r\n      isDispatching = false;\r\n    }\r\n\r\n    if (dispatchQueue.length) {\r\n      setTimeout(lazyDispatch);\r\n    }\r\n  }\r\n\r\n  function dispatch(action, ...args) {\r\n    if (isDispatching) {\r\n      dispatchQueue.push({ action, args });\r\n      return;\r\n    }\r\n    return innerDispatch(action, args);\r\n  }\r\n\r\n  return {\r\n    getState,\r\n    subscribe,\r\n    dispatch\r\n  };\r\n}\r\n"]}