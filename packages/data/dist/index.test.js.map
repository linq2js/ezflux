{"version":3,"sources":["../index.test.js"],"names":["describe","test","createCounterHandler","value","type","next","getterCalled","setterCalled","store","counter","increaseAction","by","state","dispatch","expect","toBe","getState","original","not"],"mappings":"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","file":"index.test.js","sourcesContent":["import createStore, { createImmutable } from \"./index\";\r\n\r\n/*\r\n\r\n  const createHandler => value => request => {\r\n    request.type => get | set\r\n    request.cached => indicate that this value is cached or not\r\n    request.next => next value\r\n    request.prev => prev/cached value\r\n  };\r\n\r\n  const handler1 = createHandler(1);\r\n  const handler2 = createHandler(2);\r\n\r\n  const store = createStore({\r\n    prop1: handler1,\r\n    prop2: handler2\r\n  });\r\n\r\n  const action = (...args) => state => ({ prop1: args[0], prop2: args[1] });\r\n\r\n  store.dispatch(action, 1, 2);\r\n*/\r\n\r\n/*\r\n  // add banak account sample\r\n\r\n  cosnt store createStore({\r\n    accounts: createMongoCollectionHandler('accounts')\r\n  });\r\n\r\n  const addBankAccount = (name) => state => {\r\n    if (state.accounts.findByUser(name)) {\r\n      throw new Error();\r\n    }\r\n    return {\r\n      accounts: state.accounts.add({ username: name })\r\n    };\r\n  };\r\n\r\n  store.dispatch(addBankAccount, 'newuser');\r\n\r\n */\r\n\r\ndescribe(\"createStore\", () => {\r\n  test(\"getter and setter of handler should be called\", async () => {\r\n    let getterCalled = false;\r\n    let setterCalled = false;\r\n    function createCounterHandler(value) {\r\n      return function({ type, next }) {\r\n        if (type === \"get\") {\r\n          getterCalled = true;\r\n          return value;\r\n        }\r\n\r\n        if (type === \"set\") {\r\n          setterCalled = true;\r\n          return (value = next);\r\n        }\r\n      };\r\n    }\r\n\r\n    const store = createStore({\r\n      counter: createCounterHandler(0)\r\n    });\r\n\r\n    const increaseAction = (by = 1) => state => ({\r\n      counter: state.counter + by\r\n    });\r\n\r\n    await store.dispatch(increaseAction, 5);\r\n\r\n    expect(getterCalled).toBe(true);\r\n    expect(setterCalled).toBe(true);\r\n    const counter = await store.getState().counter;\r\n\r\n    expect(counter).toBe(5);\r\n  });\r\n\r\n  test(\"getter and setter of handler should be called\", async () => {\r\n    let getterCalled = false;\r\n    let setterCalled = false;\r\n    function createCounterHandler(value) {\r\n      return function({ type, next }) {\r\n        if (type === \"get\") {\r\n          getterCalled = true;\r\n          return value;\r\n        }\r\n\r\n        if (type === \"set\") {\r\n          setterCalled = true;\r\n          return (value = next);\r\n        }\r\n      };\r\n    }\r\n\r\n    const store = createStore({\r\n      counter: createCounterHandler(1)\r\n    });\r\n\r\n    const increaseAction = (by = 1) => state => ({\r\n      counter: state.counter + by\r\n    });\r\n\r\n    await store.dispatch(increaseAction, 0);\r\n\r\n    expect(getterCalled).toBe(true);\r\n    expect(setterCalled).toBe(false);\r\n    const counter = await store.getState().counter;\r\n\r\n    expect(counter).toBe(1);\r\n  });\r\n});\r\n\r\ndescribe(\"createImmutable\", () => {\r\n  test(\"can get value from immutable object\", () => {\r\n    const original = createImmutable({ counter: 0 });\r\n    expect(original.counter()).toBe(0);\r\n  });\r\n\r\n  test(\"can set value to immutable object\", () => {\r\n    const original = createImmutable({ counter: 0 });\r\n    expect(original.counter(1).counter()).toBe(1);\r\n  });\r\n\r\n  test(\"immutable object should create cloned object if there is any change\", () => {\r\n    const original = createImmutable({ counter: 0 });\r\n    expect(original.counter(1)).not.toBe(original);\r\n  });\r\n\r\n  test(\"immutable object should not create cloned object if there is no change\", () => {\r\n    const original = createImmutable({ counter: 0 });\r\n    expect(original.counter(0)).toBe(original);\r\n  });\r\n});"]}