{"version":3,"sources":["../index.test.js"],"names":["createStore","createImmutable","describe","test","getterCalled","setterCalled","createCounterHandler","value","type","next","store","counter","increaseAction","by","state","dispatch","expect","toBe","getState"],"mappings":"AAAA,OAAOA,WAAP,IAAsBC,eAAtB,QAA6C,SAA7C;;AAEA;;;;;;;;;;;;;;;;;;;;;;AAsBA;;;;;;;;;;;;;;;;;;;;AAoBAC,SAAS,aAAT,EAAwB,MAAM;AAC5BC,OAAK,+CAAL,EAAsD,YAAY;AAChE,QAAIC,eAAe,KAAnB;AACA,QAAIC,eAAe,KAAnB;AACA,aAASC,oBAAT,CAA8BC,KAA9B,EAAqC;AACnC,aAAO,UAAS,EAAEC,IAAF,EAAQC,IAAR,EAAT,EAAyB;AAC9B,YAAID,SAAS,KAAb,EAAoB;AAClBJ,yBAAe,IAAf;AACA,iBAAOG,KAAP;AACD;;AAED,YAAIC,SAAS,KAAb,EAAoB;AAClBH,yBAAe,IAAf;AACA,iBAAQE,QAAQE,IAAhB;AACD;AACF,OAVD;AAWD;;AAED,UAAMC,QAAQV,YAAY;AACxBW,eAASL,qBAAqB,CAArB;AADe,KAAZ,CAAd;;AAIA,UAAMM,iBAAiB,CAACC,KAAK,CAAN,KAAYC,UAAU;AAC3CH,eAASG,MAAMH,OAAN,GAAgBE;AADkB,KAAV,CAAnC;;AAIA,UAAMH,MAAMK,QAAN,CAAeH,cAAf,EAA+B,CAA/B,CAAN;;AAEAI,WAAOZ,YAAP,EAAqBa,IAArB,CAA0B,IAA1B;AACAD,WAAOX,YAAP,EAAqBY,IAArB,CAA0B,IAA1B;AACA,UAAMN,UAAU,MAAMD,MAAMQ,QAAN,GAAiBP,OAAvC;;AAEAK,WAAOL,OAAP,EAAgBM,IAAhB,CAAqB,CAArB;AACD,GAhCD;;AAkCAd,OAAK,+CAAL,EAAsD,YAAY;AAChE,QAAIC,eAAe,KAAnB;AACA,QAAIC,eAAe,KAAnB;AACA,aAASC,oBAAT,CAA8BC,KAA9B,EAAqC;AACnC,aAAO,UAAS,EAAEC,IAAF,EAAQC,IAAR,EAAT,EAAyB;AAC9B,YAAID,SAAS,KAAb,EAAoB;AAClBJ,yBAAe,IAAf;AACA,iBAAOG,KAAP;AACD;;AAED,YAAIC,SAAS,KAAb,EAAoB;AAClBH,yBAAe,IAAf;AACA,iBAAQE,QAAQE,IAAhB;AACD;AACF,OAVD;AAWD;;AAED,UAAMC,QAAQV,YAAY;AACxBW,eAASL,qBAAqB,CAArB;AADe,KAAZ,CAAd;;AAIA,UAAMM,iBAAiB,CAACC,KAAK,CAAN,KAAYC,UAAU;AAC3CH,eAASG,MAAMH,OAAN,GAAgBE;AADkB,KAAV,CAAnC;;AAIA,UAAMH,MAAMK,QAAN,CAAeH,cAAf,EAA+B,CAA/B,CAAN;;AAEAI,WAAOZ,YAAP,EAAqBa,IAArB,CAA0B,IAA1B;AACAD,WAAOX,YAAP,EAAqBY,IAArB,CAA0B,KAA1B;AACA,UAAMN,UAAU,MAAMD,MAAMQ,QAAN,GAAiBP,OAAvC;;AAEAK,WAAOL,OAAP,EAAgBM,IAAhB,CAAqB,CAArB;AACD,GAhCD;AAiCD,CApED","file":"index.test.js","sourcesContent":["import createStore, { createImmutable } from \"./index\";\r\n\r\n/*\r\n\r\n  const createHandler => value => request => {\r\n    request.type => get | set\r\n    request.cached => indicate that this value is cached or not\r\n    request.next => next value\r\n    request.prev => prev/cached value\r\n  };\r\n\r\n  const handler1 = createHandler(1);\r\n  const handler2 = createHandler(2);\r\n\r\n  const store = createStore({\r\n    prop1: handler1,\r\n    prop2: handler2\r\n  });\r\n\r\n  const action = (...args) => state => ({ prop1: args[0], prop2: args[1] });\r\n\r\n  store.dispatch(action, 1, 2);\r\n*/\r\n\r\n/*\r\n  // add banak account sample\r\n\r\n  cosnt store createStore({\r\n    accounts: createMongoCollectionHandler('accounts')\r\n  });\r\n\r\n  const addBankAccount = (name) => state => {\r\n    if (state.accounts.findByUser(name)) {\r\n      throw new Error();\r\n    }\r\n    return {\r\n      accounts: state.accounts.add({ username: name })\r\n    };\r\n  };\r\n\r\n  store.dispatch(addBankAccount, 'newuser');\r\n\r\n */\r\n\r\ndescribe(\"createStore\", () => {\r\n  test(\"getter and setter of handler should be called\", async () => {\r\n    let getterCalled = false;\r\n    let setterCalled = false;\r\n    function createCounterHandler(value) {\r\n      return function({ type, next }) {\r\n        if (type === \"get\") {\r\n          getterCalled = true;\r\n          return value;\r\n        }\r\n\r\n        if (type === \"set\") {\r\n          setterCalled = true;\r\n          return (value = next);\r\n        }\r\n      };\r\n    }\r\n\r\n    const store = createStore({\r\n      counter: createCounterHandler(0)\r\n    });\r\n\r\n    const increaseAction = (by = 1) => state => ({\r\n      counter: state.counter + by\r\n    });\r\n\r\n    await store.dispatch(increaseAction, 5);\r\n\r\n    expect(getterCalled).toBe(true);\r\n    expect(setterCalled).toBe(true);\r\n    const counter = await store.getState().counter;\r\n\r\n    expect(counter).toBe(5);\r\n  });\r\n\r\n  test(\"getter and setter of handler should be called\", async () => {\r\n    let getterCalled = false;\r\n    let setterCalled = false;\r\n    function createCounterHandler(value) {\r\n      return function({ type, next }) {\r\n        if (type === \"get\") {\r\n          getterCalled = true;\r\n          return value;\r\n        }\r\n\r\n        if (type === \"set\") {\r\n          setterCalled = true;\r\n          return (value = next);\r\n        }\r\n      };\r\n    }\r\n\r\n    const store = createStore({\r\n      counter: createCounterHandler(1)\r\n    });\r\n\r\n    const increaseAction = (by = 1) => state => ({\r\n      counter: state.counter + by\r\n    });\r\n\r\n    await store.dispatch(increaseAction, 0);\r\n\r\n    expect(getterCalled).toBe(true);\r\n    expect(setterCalled).toBe(false);\r\n    const counter = await store.getState().counter;\r\n\r\n    expect(counter).toBe(1);\r\n  });\r\n});\r\n"]}